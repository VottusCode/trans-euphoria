// The database schema
datasource db {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum Sexuality {
  Straight
  Gay_Lesbian
  Bisexual
  Pansexual
  Asexual
  Other
}

enum Gender {
  Male
  Female
  Non_Binary
  Other
}

enum VerificationState {
  PreVerify // Joined the server and didn't run !verify yet.
  Verifying // Currently verifying
  Denied // Denied, can try again
  Denied_Permanent // Denied, banned from retrying - trolls 
  Approved // Approved
}

model Guild {
  // The guild id
  id            String         @id
  // The guild name
  name          String
  // Relationships
  users         User[]
  verifications Verification[]
  // Settings
  unverifiedRoleId String?
  verifyRoleId String?
  verifiedCategoryId String?

  @@map("te_guilds")
}

model User {
  // The unique id for the user, it differs from the Discord id,
  // that's `discordId`.
  id             String         @id @default(cuid())
  // The username, by default it's the discord username.
  username       String
  // Pronouns - they're in the they/them/their/theirs format,
  // serialized as [they, them, their, theirs].
  pronouns       String         @default("they/them/their/theirs")
  // About
  about          String?
  // Sexuality
  sexuality      Sexuality      @default(Other)
  // Gender
  gender         Gender         @default(Other)
  // Verifications
  verifications  Verification[]
  // Discord account
  discordAccount DiscordAccount @relation(fields: [discordId], references: [id])
  discordId      String         @unique
  // Guilds the user is in
  guilds         Guild[]

  @@map("te_users")
}

model DiscordAccount {
  // The discord id of the user
  id            String @id
  // Discord username
  username      String
  // Discord #
  discriminator String
  // Avatar Id
  avatarId      String
  // User associated to this discord account
  user          User?

  @@map("te_discord_accounts")
}

model Verification {
  id        String            @id @default(cuid())
  // The user being verified.
  user      User?             @relation(fields: [userId], references: [id])
  userId    String?
  // Verification answer
  answer    String?
  // Verification State
  state     VerificationState @default(PreVerify)
  // Discord Channel Id - required for non-closed verifications,
  // if the bot were to restart, it needs to re-hook it's listeners.
  channelId String?
  // The guild you're being verified on
  guild     Guild             @relation(fields: [guildId], references: [id])
  guildId   String

  @@map("te_user_verification")
}
